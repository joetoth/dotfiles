$VI_MODE=True
$XONSH_SHOW_TRACEBACK = True
$XONSH_COLOR_STYLE='default'
$XONSH_HISTORY_SIZE=(1000000, 'commands')
$XONSH_HISTORY_BACKEND = 'sqlite'
$COMPLETIONS_CONFIRM=True
$HISTCONTROL='ignoredups'
$_JAVA_AWT_WM_NONREPARENTING=1
$PATH.append($HOME + '/opt/google-cloud-sdk/bin')
$PATH.append($HOME + '/projects/go/bin')
$PATH.append($HOME + '/bin')
$GOPATH = $HOME + '/projects/go/'

$WORK_XSH = $HOME + '/wdf/work.xsh'

aliases['zr'] = 'source ' + $HOME + '/.xonshrc'
aliases['ze'] = 'vi ' + $HOME + '/.xonshrc'
aliases['zwe'] = 'vi ' + $WORK_XSH
aliases['g'] = 'git'
#aliases['h'] = 'hg'
aliases['cda'] = 'cd ' + $HOME + '/projects/coin'
aliases['cdp'] = 'cd ' + $HOME + '/projects/'
aliases['cde'] = 'cd ' + $HOME + '/projects/coin/psy/eth'
aliases['cdd'] = 'cd ' + $HOME + '/projects/datasets'
# aliases['ll'] = 'ls -alh --color'
# aliases['lt'] = 'ls -alhrt --color'
# aliases['ls'] = 'ls -h --color'
# aliases['lss'] = 'ls -SlaGhr --color'
# aliases['lsg'] = 'll | grep --color'
aliases['vpn'] = 'sudo openvpn --config /etc/openvpn/USA-New_York.ovpn'
aliases['vpn1'] = 'sudo openvpn --config /etc/openvpn/USA-New_Jersey.ovpn'
aliases['vpn2'] = 'sudo openvpn --config /etc/openvpn/USA-Washington.ovpn'

def topdirs():
  $[/usr/bin/du -sh * | /usr/bin/sort -h]


aliases['what_port_app'] = 'sudo netstat -nlp | grep'
#aliases['pomo'] = 'sleep 1500; notify-send -u critical "BREAK BREAK BREAK\nBREAK BREAK BREAK\nBREAK BREAK BREAK\nBREAK BREAK BREAK\nBREAK BREAK BREAK"&'
#alias learnd='python $HOME/bin/python/learn.py --daemon=true'
#alias learn-concept='python $HOME/bin/python/learn.py --concept '
#alias learn-printall='python $HOME/bin/python/learn.py --printall=true'
#alias rekall='python $HOME/bin/python/learn.py --rekall=true --concept'
#alias learn-remove='python $HOME/bin/python/learn.py --remove=true --concept'




import os
import re
from prompt_toolkit.keys import Keys
#from prompt_toolkit.filters import Condition, EmacsInsertMode, ViInsertMode

def _h(cmd):
    if not cmd:
        $[hg status]
    else:
        $[hg @(cmd)]

aliases['h'] = _h

class RequiredCommand:
    def __init__(self, cmd):
        cmd_path = get_command_path(cmd)
        self.cmd = cmd_path if cmd else cmd

    def __call__(self, func):
        def error(msg):
            print("\nfzf-widgets: command not found: {}".format(self.cmd))

        def wrapped(*args):
            func(*args)

        if self.cmd:
            return wrapped
        else:
            return error


def get_command_path(cmd):
    result = $(which @(cmd))
    return os.path.exists(result) if result else None


def get_fzf_selector():  
    if $(echo $TMUX):
        return 'fzf-tmux'
    return 'fzf'


def fzf_insert(current_buffer, prefix='', suffix=''):
    selector = get_fzf_selector()
    choice = $(history show all | @(selector) --tac -q @(current_buffer.text) --tiebreak=index +m).replace('\n', '')

    if choice:
        command = prefix + choice + suffix
        current_buffer.text = command

@events.on_ptk_create
def custom_keybindings(bindings, **kw):
     handler = bindings.add

     @handler(Keys.ControlR)
#     @RequiredCommand('fzf')
     def fzf_history(event):
         fzf_insert(event.current_buffer)

#if os.path.isfile($WORK_XSH):
#  source $WORK_XSH

aliases['cda']='g4d abe'

