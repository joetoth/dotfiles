#Use UTF-8
set-option -g status-utf8 on

# causes tmux to resize a window based on the smallest client actually viewing it, 
# not on the smallest one attached to the entire session.
setw -g aggressive-resize on

#set-option -gw xterm-keys on
set-option -g update-environment "SSH_AUTH_SOCK \
                                  SSH_CONNECTION \
                                  DISPLAY"

# mouse behavior
# setw -g mode-mouse on
# set -g mouse-select-pane on
# set -g mouse-resize-pane on

# use CTRL-A as modifier
set-option -g prefix C-a

# Support for 256 colors
set -g default-terminal "screen-256color"
# bind vi key-mapping
set -g status-keys vi

# Renumber windows in numerical order when one is close
set -g renumber-windows on

#vi-style controls for copy mode
set-window-option -g mode-keys vi

# Window index base 1
set -g base-index 1

# Set status bar
set-window-option -g window-status-current-bg red
set -g status-bg black
set -g status-fg white
set -g status-left '#[fg=green]#H'
set -g status-right '#[fg=blue]#(uptime | cut -d"," -f 2-)'

# large history
set-option -g history-limit 10000

# display active pane in diff background
set-option -g pane-active-border-fg red
set-option -g pane-active-border-bg red

# highlight status bar on activity
setw -g monitor-activity on
set -g visual-activity on
set -g visual-bell off
# automatically set window title
set -g automatic-rename

# speed up 
set-option -s escape-time 10

# List of plugins
#set -g @shell_mode 'vi'
#set -g @plugin "tmux-plugins/tpm" 
#set -g @plugin "tmux-plugins/tmux-yank" 

# initializes TMUX plugin manager
#run-shell ~/.tmux/plugins/tpm/tpm

####### Bindings ########
bind-key C-a last-window
bind-key C-c copy-mode \; send-keys "0"
bind-key a send-prefix

# in copy mode...
bind -t vi-copy v begin-selection 
bind -t vi-copy V begin-selection
bind -t vi-copy y copy-selection # `y` copies the current selection to one of
bind -t vi-copy C-v rectangle-toggle # `V` changes between line- and columnwise
bind-key -t vi-copy 'o' copy-pipe "openjt"
bind-key -t vi-copy 'y' copy-pipe "xclip -sel clip -i"
bind-key -t vi-copy 'Y' copy-pipe "tr '\r\n' ' ' | xclip -sel primary -i ; xdotool key Ctrl+Shift+V"

# force a reload of the config file
bind r source-file ~/.tmux.conf \; run-shell "echo 'Configuration Reloaded'"

# split windows like vim.  - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
unbind s
bind s split-window -v
bind S split-window -v -l 40
bind v split-window -h
bind V split-window -h -l 120

# navigate panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
bind-key -r J resize-pane -D
bind-key -r K resize-pane -U
bind-key -r H resize-pane -L
bind-key -r L resize-pane -R

#bind -n C-H previous-window
#bind -n C-L next-window
bind -n C-left previous-window
bind -n C-right next-window

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"

# bind ; to command-prompt like vim
bind \; command-prompt

# navigate to designated panes
bind-key u select-window -t 1
bind-key i select-window -t 2
bind-key o select-window -t 3
#bind-key p select-window -t 4

bind-key "p" run-shell "capture.sh"
